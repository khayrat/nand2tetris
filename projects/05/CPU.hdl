// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Put your code here:

    // in case of A-OP, the 'instruction' is an address and should be loaded to A
    // otherwise its C-OP i.e. an instruction and not loaded in to A but further processed as C-bits
    Mux16(a=instruction, b=fromALU, sel=instruction[15], out=AorALU);

    // A register
    Not(in=instruction[15], out=AOP);
    Or(a=AOP, b=instruction[5], out=loadA);
    Register(in=AorALU, load=loadA, out=fromA);

    // In case of a C-OP, the singe a-bit determines whether the ALU will operate 
    // on the A register input or the M input.
    // if (C-OP && a-bit) then sel=0 else 1
    And(a=instruction[15], b=instruction[12], out=AorM);
    Mux16(a=fromA, b=inM, sel=AorM, out=toALU);

    // register D
    And(a=instruction[15], b=instruction[4], out=loadD);
    Register(in=fromALU, load=loadD, out=fromD);

    ALU(x=fromD, y=toALU, 
        zx=instruction[11],
        nx=instruction[10],
        zy=instruction[9],
        ny=instruction[8],
        f=instruction[7],
        no=instruction[6],
        out=fromALU,
        zr=zr,
        ng=ng);

    // OUT: writeM
    And(a=instruction[15], b=instruction[3], out=writeM);

    // OUT: addressM
    And16(a=fromA, b=true, out[0..14]=addressM);

    // OUT: outM
    And16(a=fromALU, b=true, out=outM);

    // PC load controls
  
    // the load is determined by examining the ALU's Cs outputs - see p.69 of doc 04.pdf
    // JMP: j1 and j2 and j3 == 1
    And(a=instruction[2], b=instruction[1], out=jmptmp);
    And(a=jmptmp, b=instruction[0], out=jmp);

    // JLE: j1 and j2 and not(j3) and (ng or zr) - alu-out <= 0
    Not(in=instruction[0], out=notj3);
    And(a=instruction[2], b=instruction[1], out=j1andj2);
    And(a=j1andj2, b=notj3, out=jletmp);
    Or(a=zr, b=ng, out=lez);
    And(a=jletmp, b=lez, out=jle);

    // JNE: j1 and not(j2) and j3 and not(zr) - alu-out != 0
    Not(in=instruction[1], out=notj2);
    And(a=instruction[2], b=instruction[0], out=j1andj3);
    And(a=j1andj3, b=notj2, out=jnetmp);
    Not(in=zr, out=notzr);
    And(a=jnetmp, b=notzr, out=jne);

    // JLT: j1 and not(j2) and not(j3) and ng - alu-out < 0
    And(a=notj2, b=notj3, out=notj2andnotj3);
    And(a=instruction[2], b=notj2andnotj3, out=jlttmp);
    And(a=notzr, b=ng, out=lt);
    And(a=jlttmp, b=lt, out=jlt);

    // JGE: j2 and j3 and not(j1) and (zr or not(ng)) - alu-out >= 0
    Not(in=instruction[2], out=notj1);
    And(a=instruction[1], b=instruction[0], out=j2andj3);
    And(a=j2andj3, b=notj1, out=jgetmp);
    Not(in=ng, out=notng);
    Or(a=zr, b=notng, out=get);
    And(a=jgetmp, b=get, out=jge);

    // JEQ: j2 and not(j1) and not(j3) and zr - alu-out = 0
    And(a=notj1, b=notj3, out=notj1andnotj3);
    And(a=instruction[1], b=notj1andnotj3, out=jeqtmp);
    And(a=jeqtmp, b=zr, out=jeq);

    // JGT: j3 and not(j1) and not(j2) and not(ng)
    And(a=notj1, b=notj2, out=notj1andnotj2);
    And(a=instruction[0], b=notj1andnotj2, out=jgttmp);
    And(a=notzr, b=notng, out=gt);
    And(a=jgttmp, b=gt, out=jgt);
  
    Or(a=jmp, b=jle, out=j1); 
    Or(a=j1, b=jne, out=j2); 
    Or(a=j2, b=jlt, out=j3); 
    Or(a=j3, b=jge, out=j4); 
    Or(a=j4, b=jeq, out=j5); 
    Or(a=j5, b=jgt, out=j6); 

    And(a=instruction[15], b=j6, out=loadpc); 

    PC(in=fromA, load=loadpc, inc=true, reset=reset, out[0..14]=pc);
}
