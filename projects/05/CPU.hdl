// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // if (instruction[15] == 0) interp. instr. as address and load it into A-Reg.
    Mux16(a=instruction, b=aluOut, sel=instruction[15], out=aIn);

    // update A-Reg?
    // AInstr == 1 iff instruction[15] == 0
    Not(in=instruction[15], out=AInstr);
    Or(a=AInstr, b=instruction[5], out=loadA);

    // A-Register
    ARegister(in=aIn, load=loadA, out=aOut, out[0..14]=addressM);

    // D-Register
    // update D-Reg?
    And(a=instruction[15], b=instruction[4], out=loadD);
    DRegister(in=aluOut, load=loadD, out=dOut);

    // instruction[12] determins wheter the ALU is fed by the A-Reg or Memory
    Mux16(a=aOut, b=inM, sel=instruction[12], out=aOrM);

    ALU(x=dOut, y=aOrM,
        zx=instruction[11],
        nx=instruction[10],
        zy=instruction[9],
        ny=instruction[8],
        f=instruction[7],
        no=instruction[6],
        out=outM, out=aluOut,
        zr=cmpZero,
        ng=cmpNg
    );

    // write to memory?
    And(a=instruction[15], b=instruction[3], out=writeM);

    // Jump?
    // JLT 100
    And(a=notJ1, b=notJ0, out=notJ1NotJ0);
    And(a=instruction[2], b=notJ1NotJ0, out=j2NotJ1NotJ0);
    And(a=j2NotJ1NotJ0, b=cmpNg, out=lt);


    // JEQ 010
    Not(in=instruction[0], out=notJ0);
    And(a=notJ2, b=instruction[1], out=notJ2j1);
    And(a=notJ2j1, b=notJ0, out=notJ2j1NotJ0);
    And(a=notJ2j1NotJ0, b=cmpZero, out=eq);

    // JGT 001
    Not(in=cmpNg, out=notCmpNg);
    Not(in=cmpZero, out=notCmpZero);
    And(a=notCmpNg, b=notCmpZero, out=cmpGTZero);
    And(a=notJ2, b=notJ1, out=notJ2NotJ1);
    And(a=instruction[0], b=notJ2NotJ1, out=notJ2NotJ1j0);
    And(a=notJ2NotJ1j0, b=cmpGTZero, out=gt);

    // JGE 011
    Or(a=cmpZero, b=cmpGTZero, out=cmpGE);
    And(a=instruction[1], b=instruction[0], out=j1j0);
    Not(in=instruction[2], out=notJ2);
    And(a=j1j0, b=notJ2, out=notJ2j1j0);
    And(a=notJ2j1j0, b=cmpGE, out=ge);

    // JNE 101
    And(a=instruction[2], b=instruction[0], out=j2j0);
    Not(in=instruction[1], out=notJ1);
    And(a=j2j0, b=notJ1, out=j2NotJ1j0);
    And(a=j2NotJ1j0, b=notCmpZero, out=ne);
    

    // JLE 110
    And(a=instruction[2], b=instruction[1], out=j2j1);
    And(a=j2j1, b=notJ0, out=j2j1Notj0);
    Or(a=cmpZero, b=cmpNg, out=cmpLE);
    And(a=j2j1Notj0, b=cmpLE, out=le);

    // JMP 111
    And(a=j2j1, b=instruction[0], out=jmp);

    Or8Way(in[0]=lt, in[1]=eq, in[2]=gt, in[3]=ge, 
           in[4]=ne, in[5]=le, in[6]=jmp, in[7]=false, 
           out=jmpIfCInstr);
    And(a=jmpIfCInstr, b=instruction[15], out=doJMP);
    Not(in=doJMP, out=cont);

    PC(in=aOut, load=doJMP, inc=cont, reset=reset, out[0..14]=pc);
}
