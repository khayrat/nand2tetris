// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // instruction[15] determines if the insturction is 'c' (if instruction[15]==1) or 'a' (==0)
    // only a-instructions are passed to A; c-instructions are decoded instantly and not stored anywere.
    // c-> ain:=ALU-out, a-> ain:=instruction[0..14]
    Mux16(a[0..14]=instruction[0..14], a[15]=false, b=aluout, sel=instruction[15], out=ain);

    /* A */
    // A is updated if (c-instruction and d1==1) or a-instruction
    Not(in=instruction[15], out=aInstr);
    Or(a=instruction[5], b=aInstr, out=d1OrA);
    ARegister(in=ain, load=d1OrA, out=aout);


    /* Mux */
    Mux16(a=aout, b=inM, sel=instruction[12], out=am);

    /* D */
    // d is updated if d2==1 and c-instruction
    And(a=instruction[4], b=instruction[15], out=CAndd2);
    DRegister(in=aluout, load=CAndd2, out=dout);

    /* ALU */
    ALU(x=dout, y=am, zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6], out=aluout,zr=zrout, ng=ngout);

    // aluout -> outM
    And16(a=aluout, b=aluout, out=outM);

    // aout-> addressM
    And16(a=aout, b=aout, out[0..14]=addressM); 

    // writeM
    Mux(a=false, b=true, sel=instruction[3], out=w); // M=d3?
    And(a=instruction[15], b=w, out=writeM);         // C-Instr.?

    /* PC */
    // j1 && ng
    And(a=instruction[2], b=ngout, out=l1);
    // j2 && zr
    And(a=instruction[1], b=zrout, out=l2);
    // j3 && aout > 0
    Or(a=ngout, b=zrout, out=ngorzr);
    Not(in=ngorzr, out=grz);
    And(a=instruction[0], b=grz, out=l3);
    // load=and(c-instruction, or(or(l1,l2), l3));
    Or(a=l1, b=l2, out=l12);
    Or(a=l12, b=l3, out=l123);
    And(a=instruction[15], b=l123, out=lpc);
    PC(in=aout, load=lpc, inc=true, reset=reset, out[0..14]=pc);
}
